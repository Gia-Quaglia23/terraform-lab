resource "aws_s3_bucket" "primary" {
  count = var.bucket_count
  bucket = "bucket-primary-${count.index}"
  region = "us-west-2"
  versioning {
    enabled = true
  }
  server_side_encryption_configuration {
    rule {
      apply_server_side_encryption_by_default {
        sse_algorithm = "AES256"
      }
    }
  }
  lifecycle {
    prevent_destroy = true
  }
}

resource "aws_s3_bucket" "secondary" {
  count = var.bucket_count
  bucket = "bucket-secondary-${count.index}"
  region = "us-east-2"
  versioning {
    enabled = true
  }
  server_side_encryption_configuration {
    rule {
      apply_server_side_encryption_by_default {
        sse_algorithm = "AES256"
      }
    }
  }
  lifecycle {
    prevent_destroy = true
  }
}

resource "aws_iam_role" "replication_role" {
  name = "replication-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Principal = {
          Service = "s3.amazonaws.com"
        },
        Action = "sts:AssumeRole"
      },
    ]
  })
}

resource "aws_iam_role_policy" "replication_policy" {
  name = "replication-policy"
  role = aws_iam_role.replication_role.id

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "s3:GetObjectVersion",
          "s3:GetObjectVersionAcl",
          "s3:ListBucket",
          "s3:ListBucketVersions"
        ],
        Resource = [
          "arn:aws:s3:::bucket-primary-${count.index}/*",
          "arn:aws:s3:::bucket-primary-${count.index}"
        ]
      },
      {
        Effect = "Allow",
        Action = [
          "s3:PutObject",
          "s3:PutObjectAcl"
        ],
        Resource = [
          "arn:aws:s3:::bucket-secondary-${count.index}/*"
        ]
      }
    ]
  })
}

resource "aws_s3_bucket_replication_configuration" "primary_to_secondary" {
  count = var.bucket_count
  bucket = aws_s3_bucket.primary[count.index].id
  role   = aws_iam_role.replication_role.arn

  rules {
    id     = "replication-rule-${count.index}"
    status = "Enabled"
    destination {
      bucket        = aws_s3_bucket.secondary[count.index].arn
      storage_class = "STANDARD"
    }
    filter {
      prefix = ""
    }
    delete_marker_replication {
      status = "Enabled"
    }
    replication_time {
      status = "Enabled"
      time {
        minutes = 15
      }
    }
  }
}

